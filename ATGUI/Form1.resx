<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>
